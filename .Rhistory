}
## Checks if inverse has already been calculated,
## checks if the matrix has been modified and calculates
## and stores the inverse
cacheSolve <- function(x, ...) {
inverse <- x$getInverse()
if(!is.null(inverse)) {
if(matricesEqual(x$getInitialData(), x$get())) {
message("getting cached data")
return(inverse)
}
}
message("Inverse unknown or matrix has changed")
data <- x$get()
inverse <- solve(data, ...)
x$setInverse(inverse)
x$setInitialData(data)
inverse
}
## A helper function that checks matrix equality
matricesEqual <- function(x, y) {
is.matrix(x) && is.matrix(y) && dim(x) == dim(y) && all(x == y)
}
test <- matrix (1:4,2 ,2)
testm <- makeCacheMatrix(test)
cacheSolve(testm)
test <- matrix (1:9,3 ,3)
testm <- makeCacheMatrix(test)
cacheSolve(testm)
## Creates a wrapper object around the provided matrix,
## allowing inverse caching
makeCacheMatrix <- function(x = matrix()) {
initialData <- NULL
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
getInitialData <- function() initialData
setInitialData <- function(data) initialData <<- data
setInverse <- function(mean) inverse <<- mean
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse,
getInitialData = getInitialData,
setInitialData = setInitialData)
}
## Checks if inverse has already been calculated,
## checks if the matrix has been modified and calculates
## and stores the inverse
cacheSolve <- function(x, ...) {
inverse <- x$getInverse()
if(!is.null(inverse)) {
if(!matricesEqual(x$getInitialData(), x$get())) {
message("getting cached data")
#return(inverse)
}
}
message("Inverse unknown or matrix has changed")
data <- x$get()
inverse <- solve(data, ...)
x$setInverse(inverse)
x$setInitialData(data)
inverse
}
## A helper function that checks matrix equality
matricesEqual <- function(x, y) {
is.matrix(x) && is.matrix(y) && dim(x) == dim(y) && all(x == y)
}
test <- matrix (1:9,3 ,3)
testm <- makeCacheMatrix(test)
cacheSolve(testm)
## Creates a wrapper object around the provided matrix,
## allowing inverse caching
makeCacheMatrix <- function(x = matrix()) {
initialData <- NULL
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
getInitialData <- function() initialData
setInitialData <- function(data) initialData <<- data
setInverse <- function(mean) inverse <<- mean
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse,
getInitialData = getInitialData,
setInitialData = setInitialData)
}
## Checks if inverse has already been calculated,
## checks if the matrix has been modified and calculates
## and stores the inverse
cacheSolve <- function(x, ...) {
inverse <- x$getInverse()
if(!matricesEqual(x$getInitialData(), x$get())) {
message("fail")
}
}
if(!is.null(inverse)) {
if(!matricesEqual(x$getInitialData(), x$get())) {
message("getting cached data")
#return(inverse)
}
}
message("Inverse unknown or matrix has changed")
data <- x$get()
inverse <- solve(data, ...)
x$setInverse(inverse)
x$setInitialData(data)
inverse
}
## A helper function that checks matrix equality
matricesEqual <- function(x, y) {
is.matrix(x) && is.matrix(y) && dim(x) == dim(y) && all(x == y)
}
## Creates a wrapper object around the provided matrix,
## allowing inverse caching
makeCacheMatrix <- function(x = matrix()) {
initialData <- NULL
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
getInitialData <- function() initialData
setInitialData <- function(data) initialData <<- data
setInverse <- function(mean) inverse <<- mean
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse,
getInitialData = getInitialData,
setInitialData = setInitialData)
}
## Checks if inverse has already been calculated,
## checks if the matrix has been modified and calculates
## and stores the inverse
cacheSolve <- function(x, ...) {
inverse <- x$getInverse()
if(!matricesEqual(x$getInitialData(), x$get())) {
message("fail")
}
if(!is.null(inverse)) {
if(!matricesEqual(x$getInitialData(), x$get())) {
message("getting cached data")
#return(inverse)
}
}
message("Inverse unknown or matrix has changed")
data <- x$get()
inverse <- solve(data, ...)
x$setInverse(inverse)
x$setInitialData(data)
inverse
}
## A helper function that checks matrix equality
matricesEqual <- function(x, y) {
is.matrix(x) && is.matrix(y) && dim(x) == dim(y) && all(x == y)
}
test <- matrix (1:9,3 ,3)
testm <- makeCacheMatrix(test)
cacheSolve(testm)
## Creates a wrapper object around the provided matrix,
## allowing inverse caching
makeCacheMatrix <- function(x = matrix()) {
initialData <- NULL
inverse <- NULL
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
getInitialData <- function() initialData
setInitialData <- function(data) initialData <<- data
setInverse <- function(mean) inverse <<- mean
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse,
getInitialData = getInitialData,
setInitialData = setInitialData)
}
## Checks if inverse has already been calculated,
## checks if the matrix has been modified and calculates
## and stores the inverse
cacheSolve <- function(x, ...) {
inverse <- x$getInverse()
if(matricesEqual(x$getInitialData(), x$get())) {
message("true")
}
if(!is.null(inverse)) {
if(!matricesEqual(x$getInitialData(), x$get())) {
message("getting cached data")
#return(inverse)
}
}
message("Inverse unknown or matrix has changed")
data <- x$get()
inverse <- solve(data, ...)
x$setInverse(inverse)
x$setInitialData(data)
inverse
}
## A helper function that checks matrix equality
matricesEqual <- function(x, y) {
is.matrix(x) && is.matrix(y) && dim(x) == dim(y) && all(x == y)
}
test <- matrix (1:9,3 ,3)
testm <- makeCacheMatrix(test)
cacheSolve(testm)
test <- matrix (1:16,4 ,4)
testm <- makeCacheMatrix(test)
cacheSolve(testm)
test <- matrix (1:4,2 ,2)
testm <- makeCacheMatrix(test)
cacheSolve(testm)
?all
all(3==3)
install.packages("swirl")
swril()
library(swril)
library(swirl)
swril("Getting and Cleaning Data")
swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
install.packages("rJava")
install.packages("rJava")
install.packages("httr")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("RMySQL")
install.packages("httr")
library(rmysql)
library("rmysql")
library(RMySQL)
library("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("quantmod")
library(quantmod)
library.packages('quantmod')
install.packages('quantmod')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
Sys.Date()
amzn[which(grep(^2012,amzn$row.names)),]
?grep
amzn[which(grep("^2012",amzn$row.names)),]
amzn[which(grep(2012,amzn$row.names)),]
amzn[whitch(grep(2012,amzn$row.names)),]
amzn[witch(grep(2012,amzn$row.names)),]
?whitch
?witch
library(plyr)
amzn[witch(grep(2012,amzn$row.names)),]
amzn[grep(2012,amzn$row.names),]
test <- amzn[grep(2012,amzn$row.names),]
amzn$row.names
amzn <- as.dataframe(amzn)
?As
?as
amzn <- as.data.frame(amzn)
amzn$row.names
View(amzn)
amzn[1,]
amzn[,1]
amzn[,0]
amzn$row.names
amzn$AMZN.Open
amzn$row.names
amzn$row.names
amzn$row.names
amzn$row.name
?col.names
?col.name
?colname
colnames(amzn)
amzn = getSymbols("AMZN",auto.assign=FALSE)
View(amzn)
colnames(amzn)
?index
sampleTimes = index(amzn)
sampleTimes
sampleTimes <- sampleTimes(which(grep(2012, sampleTimes)))
sampleTimes <- sampleTimes[which(grep(2012, sampleTimes)),]
sampleTimes <- sampleTimes[where(grep(2012, sampleTimes)),]
?which
sampleTimes <- sampleTimes[which(grep(2012, sampleTimes)),]
grep(2012,sampleTimes)
which(sampleTimes %in% paste(grep(2012,sampleTimes)))
test<- grep(2012,sampleTimes)
sampleTimes[test]
twenty<-sampleTimes[test]
format(twenty, "%A %b %m %Y")
date<-format(twenty, "%A %b %m %Y")
date(grep(^Monday, date))
date(grep(Monday, date))
date[grep(Monday, date),]
date[grep(Monday, date)]
?grep
date[which(date == "Monday"),]
date[which(date == "Monday")]
grep(^Monday, date)
grep("^Monday", date)
swirl()
library(swirl)
swirl()
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_dy()
?group_dy
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package)
summarize(by_package, mean(size))
submit()
pack_sum
quantime(pack_sum$count, probs = 0.99)
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum$count > 679)
top_counts <- filter(pack_sum$count, count > 679)
top_counts <- 4
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
?arrange
arrange(top_counts,count)
arrange(top_counts,desc(count))
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique>465)
filter(pack_sum, unique>465)
top_unique <- filter(pack_sum, unique>465)
top_unique
arrange(top_unique, dec(unique))
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather()
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex_class, count)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res, sex_class, into = c("sex","class"))
submit()
submit()
students3
submit()
submit()
submit()
submit()
submit()
?spread
?spread
submit()
submit()
submit()
submit()
extract_numeric("class5")
extract_numeric("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
rbind_list(passed,failed)
sat
submit()
submit()
submit()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_dat)
year(this_day)
wday(this_day)
wday(this_day, lable=true)
wday(this_day, label=true)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
date(25081985)
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dtl
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8,minutes=34,seconds=55)
this_moment
this_moment <- update(this_moment, hours=5,minutes=59)
this_moment
now(tzone="America/New_York")
nyc<- now("America/New_York")
nyc
depart<- nyc+days(2)
depart
depart<- update(depart, hours=17, munutes=34)
depart<- update(depart, hours=17, minutes=34)
depart
arrive = depart+hours(15)+minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long(arrive,last_time)
how_long <- new_interval(arrive,last_time)
how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
exit
quit
quit()
setwd("~/git/EDA---PM2.5")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
Point_NEI <- NEI[NEI$type=='POINT',]
View(Point_NEI)
plot(Point_NEI$year, Point_NEI$Emissions, pch=19, ylim=c(0,10000), type="l")
plot(Point_NEI$year, Point_NEI$Emissions, pch=19)
png(file="plot1.png", bg="transparent")
plot(Point_NEI$year, Point_NEI$Emissions, pch=19)
#abline(lm(NEI$Emissions~NEI$year), col="red")
dev.off()
boxplot(Point_NEI$year, Point_NEI$Emissions, pch=19)
boxplot(Point_NEI$year, Point_NEI$Emissions)
View(Point_NEI)
plot(Point_NEI$year, Point_NEI$Emissions)
png(file="plot1.png", bg="transparent")
boxplot(Point_NEI$year, Point_NEI$Emissions, pch=19)
plot(Point_NEI$year, Point_NEI$Emissions)
abline(lm(Point_NEI$Emissions~Point_NEI$year), col="red")
dev.off()
png(file="plot1.png", bg="transparent")
boxplot(Point_NEI$year, Point_NEI$Emissions, pch=19)
plot(Point_NEI$year, Point_NEI$Emissions)
#abline(lm(Point_NEI$Emissions~Point_NEI$year), col="red")
lines(lowess(Point_NEI$year, Points_NEI$Emissions)
dev.off()
png(file="plot1.png", bg="transparent")
boxplot(Point_NEI$year, Point_NEI$Emissions, pch=19)
plot(Point_NEI$year, Point_NEI$Emissions)
#abline(lm(Point_NEI$Emissions~Point_NEI$year), col="red")
lines(lowess(Point_NEI$year, Points_NEI$Emissions))
dev.off()
png(file="plot1.png", bg="transparent")
boxplot(Point_NEI$year, Point_NEI$Emissions, pch=19)
plot(Point_NEI$year, Point_NEI$Emissions)
#abline(lm(Point_NEI$Emissions~Point_NEI$year), col="red")
lines(lowess(Point_NEI$year, Point_NEI$Emissions))
dev.off()
lines(lowess(Point_NEI$year, Point_NEI$Emissions))
